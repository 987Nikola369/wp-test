{"version":3,"sources":["grid-layout.js"],"names":["$","MinimogGridPlugin","$el","options","$grid","this","find","_isotopeOptions","itemSelector","percentPosition","transitionDuration","packery","columnWidth","fitRows","gutter","triggerMethod","method","init","resizeTimer","plugin","settings","data","length","type","$minimog","isRTL","originLeft","layoutMode","calculateMasonrySize","promises","window","minimog","Helpers","imagesLoaded","Promise","all","then","on","clearTimeout","setTimeout","addClass","event","el","$items","update","isotope","append","updateLayout","disableColumnChange","parseNumberValue","setting","default_value","undefined","isNaN","parseInt","windowWidth","gridWidth","gutterDesktop","gutterLaptop","gutterTabletExtra","gutterTablet","gutterMobileExtra","gutterMobile","columnsDesktop","columnsLaptop","columnsTabletExtra","columnsTablet","columnsMobileExtra","columnsMobile","zigzagHeightDesktop","zigzagHeightLaptop","zigzagHeightTabletExtra","zigzagHeightTablet","zigzagHeightMobileExtra","zigzagHeightMobile","zigzagReversed","alternatingColumnWidth","columnAlternatingDesktop","columnAlternatingWideScreen","columnAlternatingLaptop","columnAlternatingTabletExtra","columnAlternatingTablet","columnAlternatingMobileExtra","columnAlternatingMobile","laptopBreakPoint","tabletExtraBreakPoint","tabletBreakPoint","mobileExtraBreakPoint","mobileBreakPoint","oldActiveColumns","columnWidth2","realWidth","columnHeight","columnHeight2","columnHeight7","columnHeight13","isMetro","ratioH","alternatingLoopCount","alternatingReversed","totalAlternatingColumns","totalAlternatingFlowColumns","isAlternatingColumn","innerWidth","getBoundingClientRect","width","gutterWideScreen","columns","columnsWideScreen","zigzagHeight","zigzagHeightWideScreen","columnAlternating","wideScreenBreakPoint","elementorFrontendConfig","elementorBreakpoints","responsive","breakpoints","widescreen","value","laptop","tablet_extra","tablet","mobile_extra","mobile","activeColumns","activeGutter","activeZigzagHeight","activeAlternatingColumns","document","body","trigger","attr","Math","floor","css","children","ratio","each","index","gridItem","marginTop","height","marginBottom","$itemHeight","hasClass","matchHeight","namespace","fn","extend","MinimogGridLayout","args","get","let","instance","jQuery"],"mappings":"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","file":"../../grid-layout.min.js","sourcesContent":["(function( $ ) {\n\t'use strict';\n\n\tvar MinimogGridPlugin = function( $el, options ) {\n\t\tthis.$el  = $el;\n\t\tvar $grid = $el.find( '.minimog-grid' );\n\n\t\tvar disableColumnChange      = false;\n\t\tvar activeColumns            = 1,\n\t\t    activeGutter             = 0,\n\t\t    activeZigzagHeight       = 0,\n\t\t    activeAlternatingColumns = 0; // 0 to Disable, 1 to Enable, -1 to Enable & Reversed.\n\n\t\tthis._isotopeOptions = {\n\t\t\titemSelector: '.grid-item',\n\t\t\tpercentPosition: true,\n\t\t\ttransitionDuration: 0,\n\t\t\tpackery: {\n\t\t\t\tcolumnWidth: '.grid-sizer',\n\t\t\t},\n\t\t\tfitRows: {\n\t\t\t\tgutter: 10\n\t\t\t}\n\t\t};\n\n\t\t// jQuery's methods.\n\t\tthis.triggerMethod = ( method, options ) => {\n\t\t\tif ( typeof this[method] === 'function' ) {\n\t\t\t\tthis[method]( options );\n\t\t\t}\n\t\t};\n\n\t\tthis.init = function() {\n\t\t\tvar plugin = this;\n\t\t\tvar resizeTimer;\n\n\t\t\tvar settings = $el.data( 'grid' );\n\n\t\t\tif ( $grid.length > 0 && settings && typeof settings.type !== 'undefined' ) {\n\t\t\t\tif ( $minimog.isRTL ) {\n\t\t\t\t\tplugin._isotopeOptions.originLeft = false;\n\t\t\t\t}\n\n\t\t\t\tif ( 'masonry' === settings.type || 'metro' === settings.type ) {\n\t\t\t\t\tplugin._isotopeOptions.layoutMode = 'packery';\n\t\t\t\t} else {\n\t\t\t\t\tplugin._isotopeOptions.layoutMode = 'fitRows';\n\t\t\t\t}\n\n\t\t\t\tplugin.calculateMasonrySize();\n\n\t\t\t\tvar promises = window.minimog.Helpers.imagesLoaded( $grid );\n\t\t\t\tpromises.length > 0 && Promise.all( promises ).then( ( values ) => {\n\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t} );\n\n\t\t\t\t$( window ).on( 'hresize', function() {\n\t\t\t\t\tplugin.calculateMasonrySize();\n\n\t\t\t\t\t// Sometimes layout can be overlap. then re-cal layout one time.\n\t\t\t\t\tclearTimeout( resizeTimer );\n\t\t\t\t\tresizeTimer = setTimeout( function() {\n\t\t\t\t\t\t// Run code here, resizing has \"stopped\"\n\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t}, 500 ); // DO NOT decrease the time. Sometime, It'll make layout overlay on resize.\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t$grid.addClass( 'loaded' );\n\t\t\t}\n\n\t\t\t$el.on( 'MinimogQueryEnd', function( event, el, $items ) {\n\t\t\t\tplugin.update( $items );\n\t\t\t} );\n\t\t};\n\n\t\tthis.update = function( $items ) {\n\t\t\tvar plugin   = this,\n\t\t\t    settings = $el.data( 'grid' );\n\n\t\t\tif ( $grid.length > 0 && settings && typeof settings.type !== 'undefined' ) {\n\t\t\t\t$grid.isotope().append( $items ).isotope( 'reloadItems', $items );\n\n\t\t\t\tplugin.calculateMasonrySize();\n\n\t\t\t\tvar promises = window.minimog.Helpers.imagesLoaded( $items );\n\t\t\t\tpromises.length > 0 && Promise.all( promises ).then( ( values ) => {\n\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t$grid.append( $items );\n\t\t\t}\n\t\t};\n\n\t\tthis.updateLayout = function( options = {} ) {\n\t\t\tvar plugin = this;\n\n\t\t\tplugin.disableColumnChange = true === options.disableColumnChange;\n\n\t\t\tplugin.calculateMasonrySize( options );\n\t\t};\n\n\t\tthis.parseNumberValue = function( setting = '', default_value = '' ) {\n\t\t\tif ( undefined === setting || '' === setting || isNaN( setting ) ) {\n\t\t\t\treturn default_value;\n\t\t\t}\n\n\t\t\treturn parseInt( setting );\n\t\t};\n\n\t\tthis.calculateMasonrySize = function( options = {} ) {\n\t\t\tvar plugin   = this,\n\t\t\t    settings = $el.data( 'grid' );\n\n\t\t\tif ( ! settings ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar windowWidth             = window.innerWidth,\n\t\t\t    gridWidth               = $grid[0].getBoundingClientRect().width,\n\n\t\t\t    gutterDesktop           = this.parseNumberValue( settings.gutter, 0 ),\n\t\t\t    gutterWideScreen        = this.parseNumberValue( settings.gutterWideScreen, gutterDesktop ),\n\t\t\t    gutterLaptop            = this.parseNumberValue( settings.gutterLaptop, gutterDesktop ),\n\t\t\t    gutterTabletExtra       = this.parseNumberValue( settings.gutterTabletExtra, gutterLaptop ),\n\t\t\t    gutterTablet            = this.parseNumberValue( settings.gutterTablet, gutterTabletExtra ),\n\t\t\t    gutterMobileExtra       = this.parseNumberValue( settings.gutterMobileExtra, gutterTablet ),\n\t\t\t    gutterMobile            = this.parseNumberValue( settings.gutterMobile, gutterMobileExtra ),\n\t\t\t    columnsDesktop          = this.parseNumberValue( settings.columns, 1 ),\n\t\t\t    columnsWideScreen       = this.parseNumberValue( settings.columnsWideScreen, columnsDesktop ),\n\t\t\t    columnsLaptop           = this.parseNumberValue( settings.columnsLaptop, columnsDesktop ),\n\t\t\t    columnsTabletExtra      = this.parseNumberValue( settings.columnsTabletExtra, columnsLaptop ),\n\t\t\t    columnsTablet           = this.parseNumberValue( settings.columnsTablet, columnsTabletExtra ),\n\t\t\t    columnsMobileExtra      = this.parseNumberValue( settings.columnsMobileExtra, columnsTablet ),\n\t\t\t    columnsMobile           = this.parseNumberValue( settings.columnsMobile, columnsMobileExtra ),\n\t\t\t    zigzagHeightDesktop     = this.parseNumberValue( settings.zigzagHeight, 0 ),\n\t\t\t    zigzagHeightWideScreen  = this.parseNumberValue( settings.zigzagHeightWideScreen, zigzagHeightDesktop ),\n\t\t\t    zigzagHeightLaptop      = this.parseNumberValue( settings.zigzagHeightLaptop, zigzagHeightDesktop ),\n\t\t\t    zigzagHeightTabletExtra = this.parseNumberValue( settings.zigzagHeightTabletExtra, zigzagHeightLaptop ),\n\t\t\t    zigzagHeightTablet      = this.parseNumberValue( settings.zigzagHeightTablet, zigzagHeightTabletExtra ),\n\t\t\t    zigzagHeightMobileExtra = this.parseNumberValue( settings.zigzagHeightMobileExtra, zigzagHeightTablet ),\n\t\t\t    zigzagHeightMobile      = this.parseNumberValue( settings.zigzagHeightMobile, zigzagHeightMobileExtra ),\n\t\t\t    zigzagReversed          = settings.zigzagReversed !== undefined && settings.zigzagReversed === 1 ? true : false;\n\n\t\t\tvar alternatingColumnWidth       = 0,\n\t\t\t    columnAlternatingDesktop     = this.parseNumberValue( settings.columnAlternating, 0 ),\n\t\t\t    columnAlternatingWideScreen  = this.parseNumberValue( settings.columnAlternatingWideScreen, columnAlternatingDesktop ),\n\t\t\t    columnAlternatingLaptop      = this.parseNumberValue( settings.columnAlternatingLaptop, columnAlternatingDesktop ),\n\t\t\t    columnAlternatingTabletExtra = this.parseNumberValue( settings.columnAlternatingTabletExtra, columnAlternatingLaptop ),\n\t\t\t    columnAlternatingTablet      = this.parseNumberValue( settings.columnAlternatingTablet, columnAlternatingTabletExtra ),\n\t\t\t    columnAlternatingMobileExtra = this.parseNumberValue( settings.columnAlternatingMobileExtra, columnAlternatingTablet ),\n\t\t\t    columnAlternatingMobile      = this.parseNumberValue( settings.columnAlternatingMobile, columnAlternatingMobileExtra );\n\n\t\t\tvar wideScreenBreakPoint  = 1600;\n\t\t\tvar laptopBreakPoint      = 1200;\n\t\t\tvar tabletExtraBreakPoint = 992;\n\t\t\tvar tabletBreakPoint      = 768;\n\t\t\tvar mobileExtraBreakPoint = 576;\n\t\t\tvar mobileBreakPoint      = 360;\n\n\t\t\tif ( typeof elementorFrontendConfig !== 'undefined' ) {\n\t\t\t\tvar elementorBreakpoints = elementorFrontendConfig.responsive.breakpoints;\n\n\t\t\t\twideScreenBreakPoint  =\n\t\t\t\t\tthis.parseNumberValue( elementorBreakpoints.widescreen.value, wideScreenBreakPoint );\n\t\t\t\tlaptopBreakPoint      = this.parseNumberValue( elementorBreakpoints.laptop.value, laptopBreakPoint );\n\t\t\t\ttabletExtraBreakPoint =\n\t\t\t\t\tthis.parseNumberValue( elementorBreakpoints.tablet_extra.value, tabletExtraBreakPoint );\n\t\t\t\ttabletBreakPoint      = this.parseNumberValue( elementorBreakpoints.tablet.value, tabletBreakPoint );\n\t\t\t\tmobileExtraBreakPoint =\n\t\t\t\t\tthis.parseNumberValue( elementorBreakpoints.mobile_extra.value, mobileBreakPoint );\n\t\t\t\tmobileBreakPoint      = this.parseNumberValue( elementorBreakpoints.mobile.value, mobileBreakPoint );\n\t\t\t}\n\n\t\t\tvar oldActiveColumns = plugin.activeColumns;\n\n\t\t\tif ( ! plugin.disableColumnChange ) {\n\t\t\t\tif ( windowWidth >= wideScreenBreakPoint ) { // Use >= Because from up\n\t\t\t\t\tplugin.activeColumns            = columnsWideScreen;\n\t\t\t\t\tplugin.activeGutter             = gutterWideScreen;\n\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightWideScreen;\n\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingWideScreen;\n\t\t\t\t} else if ( windowWidth > laptopBreakPoint ) {\n\t\t\t\t\tplugin.activeColumns            = columnsDesktop;\n\t\t\t\t\tplugin.activeGutter             = gutterDesktop;\n\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightDesktop;\n\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingDesktop;\n\t\t\t\t} else if ( windowWidth > tabletExtraBreakPoint ) {\n\t\t\t\t\tplugin.activeColumns            = columnsLaptop;\n\t\t\t\t\tplugin.activeGutter             = gutterLaptop;\n\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightLaptop;\n\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingLaptop;\n\t\t\t\t} else if ( windowWidth > tabletBreakPoint ) {\n\t\t\t\t\tplugin.activeColumns            = columnsTabletExtra;\n\t\t\t\t\tplugin.activeGutter             = gutterTabletExtra;\n\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightTabletExtra;\n\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingTabletExtra;\n\t\t\t\t} else if ( windowWidth > mobileExtraBreakPoint ) {\n\t\t\t\t\tplugin.activeColumns            = columnsTablet;\n\t\t\t\t\tplugin.activeGutter             = gutterTablet;\n\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightTablet;\n\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingTablet;\n\t\t\t\t} else if ( windowWidth > mobileBreakPoint ) {\n\t\t\t\t\tplugin.activeColumns            = columnsMobileExtra;\n\t\t\t\t\tplugin.activeGutter             = gutterMobileExtra;\n\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightMobileExtra;\n\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingMobileExtra;\n\t\t\t\t} else {\n\t\t\t\t\tplugin.activeColumns            = columnsMobile;\n\t\t\t\t\tplugin.activeGutter             = gutterMobile;\n\t\t\t\t\tplugin.activeZigzagHeight       = zigzagHeightMobile;\n\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingMobile;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Override Columns.\n\t\t\t */\n\t\t\tif ( typeof options.columns !== 'undefined' ) {\n\t\t\t\tplugin.activeColumns = options.columns;\n\t\t\t}\n\n\t\t\tif ( oldActiveColumns !== plugin.activeColumns ) {\n\t\t\t\t$( document.body ).trigger( 'MinimogGridLayoutColumnsChange', [\n\t\t\t\t\t$el, oldActiveColumns, plugin.activeColumns\n\t\t\t\t] );\n\t\t\t}\n\n\t\t\t$el.attr( 'data-active-columns', plugin.activeColumns );\n\n\t\t\tvar totalGutterPerRow = (plugin.activeColumns - 1) * plugin.activeGutter;\n\n\t\t\tvar columnWidth = (gridWidth - totalGutterPerRow) / plugin.activeColumns;\n\n\t\t\tcolumnWidth = Math.floor( columnWidth );\n\n\t\t\tvar columnWidth2 = columnWidth;\n\t\t\tif ( plugin.activeColumns > 1 ) {\n\t\t\t\tcolumnWidth2 = columnWidth * 2 + plugin.activeGutter;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Used this css var for layout grid border around\n\t\t\t */\n\t\t\tvar realWidth = columnWidth * plugin.activeColumns + plugin.activeGutter * (plugin.activeColumns - 1);\n\t\t\t$el.css( '--grid-real-width', realWidth + 'px' );\n\n\t\t\t$grid.children( '.grid-sizer' ).css( {\n\t\t\t\t'width': columnWidth + 'px'\n\t\t\t} );\n\n\t\t\tvar columnHeight   = 0,\n\t\t\t    columnHeight2  = 0, // 200%.\n\t\t\t    columnHeight7  = 0, // 70%.\n\t\t\t    columnHeight13 = 0, // 130%.\n\t\t\t    isMetro        = false,\n\t\t\t    ratioW         = 1,\n\t\t\t    ratioH         = 1;\n\n\t\t\tif ( settings.ratio ) {\n\t\t\t\tratioH  = settings.ratio;\n\t\t\t\tisMetro = true;\n\t\t\t}\n\n\t\t\t// Calculate item height for only metro type.\n\t\t\tif ( isMetro ) {\n\t\t\t\tcolumnHeight = columnWidth * ratioH / ratioW;\n\t\t\t\tcolumnHeight = Math.floor( columnHeight );\n\n\t\t\t\tif ( plugin.activeColumns > 1 ) {\n\t\t\t\t\tcolumnHeight2  = columnHeight * 2 + plugin.activeGutter;\n\t\t\t\t\tcolumnHeight13 = parseInt( columnHeight * 1.3 );\n\t\t\t\t\tcolumnHeight7  = columnHeight2 - plugin.activeGutter - columnHeight13;\n\t\t\t\t} else {\n\t\t\t\t\tcolumnHeight2 = columnHeight7 = columnHeight13 = columnHeight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar alternatingLoopCount        = 0;\n\t\t\tvar alternatingReversed         = plugin.activeAlternatingColumns < 0 ? true : false;\n\t\t\tvar totalAlternatingColumns     = alternatingReversed ? plugin.activeColumns - 1 : plugin.activeColumns + 1;\n\t\t\tvar totalAlternatingFlowColumns = plugin.activeColumns + totalAlternatingColumns; // Normal columns + alternating columns.\n\t\t\tvar isAlternatingColumn         = false;\n\n\t\t\tif ( plugin.activeAlternatingColumns ) {\n\t\t\t\tif ( alternatingReversed ) {\n\t\t\t\t\talternatingColumnWidth =\n\t\t\t\t\t\t(gridWidth - (totalAlternatingColumns - 1) * plugin.activeGutter) / totalAlternatingColumns;\n\t\t\t\t} else {\n\t\t\t\t\talternatingColumnWidth =\n\t\t\t\t\t\t(gridWidth - plugin.activeColumns * plugin.activeGutter) / (plugin.activeColumns + 1);\n\t\t\t\t}\n\n\t\t\t\talternatingColumnWidth = Math.floor( alternatingColumnWidth );\n\t\t\t}\n\n\t\t\t$grid.children( '.grid-item' ).each( function( index ) {\n\t\t\t\tvar gridItem = $( this );\n\t\t\t\talternatingLoopCount ++;\n\n\t\t\t\tif ( alternatingLoopCount > plugin.activeColumns ) {\n\t\t\t\t\tisAlternatingColumn = true;\n\t\t\t\t}\n\n\t\t\t\t// Zigzag.\n\t\t\t\tif ( plugin.activeZigzagHeight > 0 // Has zigzag.\n\t\t\t\t     && plugin.activeColumns > 1 // More than 1 column.\n\t\t\t\t     && index + 1 <= plugin.activeColumns // On top items.\n\t\t\t\t) {\n\t\t\t\t\tif ( zigzagReversed === false ) { // Is odd item.\n\t\t\t\t\t\tif ( index % 2 === 0 ) {\n\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t'marginTop': plugin.activeZigzagHeight + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t'marginTop': '0px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( index % 2 !== 0 ) {\n\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t'marginTop': plugin.activeZigzagHeight + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t'marginTop': '0px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t'marginTop': '0px'\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( plugin.activeAlternatingColumns && isAlternatingColumn ) {\n\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t'width': alternatingColumnWidth + 'px',\n\t\t\t\t\t\t'height': 'auto',\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tif ( gridItem.data( 'width' ) === 2 ) {\n\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t'width': columnWidth2 + 'px',\n\t\t\t\t\t\t\t'height': 'auto',\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t'width': columnWidth + 'px',\n\t\t\t\t\t\t\t'height': 'auto',\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( 'grid' === settings.type ) {\n\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t'marginBottom': plugin.activeGutter + 'px'\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( isMetro ) {\n\t\t\t\t\tvar $itemHeight;\n\n\t\t\t\t\tif ( gridItem.hasClass( 'grid-item-height' ) ) {\n\t\t\t\t\t\t$itemHeight = gridItem;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$itemHeight = gridItem.find( '.grid-item-height' );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( gridItem.data( 'height' ) === 2 ) {\n\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t'height': columnHeight2 + 'px'\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else if ( gridItem.data( 'height' ) === 1.3 ) {\n\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t'height': columnHeight13 + 'px'\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else if ( gridItem.data( 'height' ) === 0.7 ) {\n\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t'height': columnHeight7 + 'px'\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t'height': columnHeight + 'px'\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tisAlternatingColumn = false;\n\t\t\t\tif ( alternatingLoopCount % totalAlternatingFlowColumns === 0 ) {\n\t\t\t\t\talternatingLoopCount = 0; // Reset to next alternating row.\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( plugin._isotopeOptions ) {\n\t\t\t\t$grid.addClass( 'loaded' );\n\t\t\t\tplugin._isotopeOptions.packery.gutter = plugin.activeGutter;\n\t\t\t\tplugin._isotopeOptions.fitRows.gutter = plugin.activeGutter;\n\t\t\t\t$grid.isotope( plugin._isotopeOptions );\n\t\t\t}\n\n\t\t\t// Run after isotope function to fix overlap layout.\n\t\t\tif ( 'grid' === settings.type ) {\n\t\t\t\t$grid.children( '.grid-item' ).matchHeight();\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Delay 250 to fix layout overlap when toggle columns.\n\t\t\t */\n\t\t\tsetTimeout( function() {\n\t\t\t\t$grid.isotope( 'layout' );\n\t\t\t\t$el.trigger( 'MinimogGridLayoutResized' );\n\t\t\t}, 250 );\n\t\t};\n\t\tthis.init();\n\t};\n\n\tconst namespace = 'minimogGridLayout';\n\n\t$.fn.extend( {\n\t\tMinimogGridLayout: function( args, update ) {\n\t\t\t// Check if selected element exist.\n\t\t\tif ( ! this.length ) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// We need to return options.\n\t\t\tif ( args === 'options' ) {\n\t\t\t\treturn $.data( this.get( 0 ), namespace ).options();\n\t\t\t}\n\n\t\t\treturn this.each( function() {\n\t\t\t\tvar $el = $( this );\n\n\t\t\t\tlet instance = $.data( this, namespace );\n\n\t\t\t\tif ( instance ) { // Already created then trigger method.\n\t\t\t\t\tinstance.triggerMethod( args, update );\n\t\t\t\t} else { // Create new instance.\n\t\t\t\t\tinstance = new MinimogGridPlugin( $el, args );\n\t\t\t\t\t$.data( this, namespace, instance );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n}( jQuery ));\n"]}